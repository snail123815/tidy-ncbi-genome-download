import argparse
import pandas as pd
import os

parser = argparse.ArgumentParser()
parser.add_argument('tsv', help="Path to the .tsv file generated by `-m` switch")
parser.add_argument('dir', help="Path to the directory generated by `-o` parameter")
parser.add_argument('--excludeList', help="Exclusion list file, one item per line",
                    default="")

"""Assembly level - the highest level of assembly for any object in the assembly:

Complete genome - all chromosomes are gapless and have no runs of 10 or more ambiguous bases (Ns), there are no unplaced or unlocalized scaffolds, and all the expected chromosomes are present (i.e. the assembly is not noted as having partial genome representation). Plasmids and organelles may or may not be included in the assembly but if present then the sequences are gapless.
Chromosome - there is sequence for one or more chromosomes. This could be a completely sequenced chromosome without gaps or a chromosome containing scaffolds or contigs with gaps between them. There may also be unplaced or unlocalized scaffolds.
Scaffold - some sequence contigs have been connected across gaps to create scaffolds, but the scaffolds are all unplaced or unlocalized
Contig - nothing is assembled beyond the level of sequence contigs"""

args = parser.parse_args()

downloadTsv = args.tsv
downloadDir = args.dir
excludeList = args.excludeList

dirName = os.path.split(downloadDir)[1]

try:
    with open(excludeList, 'r') as el:
        exclusions = [e.strip() for e in el.readlines()]
except FileNotFoundError:
    print(f'File {excludeList} does not find.')
    exclusions = []

infoDf = pd.read_csv(downloadTsv, sep='\t', header=0, index_col=0)

c=0

# Data table to dict, check file existance
strains = {}
for acc, row in infoDf.iterrows():
    org = row.organism_name.strip()
    strain = str(row.infraspecific_name).replace('strain=', '').strip()
    name = " ".join([org, strain])

    filePath = os.path.join(downloadDir,
        row.local_filename.split(dirName)[1][1:])

    assert os.path.isfile(filePath)
    data = row.to_dict()
    data['local_filename'] = filePath
    try:
        strains[name][acc] = data
    except KeyError:
        strains[name] = {}
        strains[name][acc] = data

validAssemblies = {}
for s in strains:
    inEx = False
    for ex in exclusions:
        if ex in s:
            inEx = True
            break
    if inEx: continue

    if len(strains[s])>1:
        complete   = [strains[s][acc] for acc in strains[s] if \
            strains[s][acc]['assembly_level'] == 'Complete Genome']
        chromosome = [strains[s][acc] for acc in strains[s] if \
            strains[s][acc]['assembly_level'] == 'Chromosome']
        scaffold   = [strains[s][acc] for acc in strains[s] if \
            strains[s][acc]['assembly_level'] == 'Scaffold']
        contig     = [strains[s][acc] for acc in strains[s] if \
            strains[s][acc]['assembly_level'] == 'Contig']

        assert len(complete + chromosome + scaffold + contig) == len(strains[s])

        complete.sort(  key=lambda d: d['seq_rel_date'], reverse=True)
        chromosome.sort(key=lambda d: d['seq_rel_date'], reverse=True)
        scaffold.sort(  key=lambda d: d['seq_rel_date'], reverse=True)
        contig.sort(    key=lambda d: d['seq_rel_date'], reverse=True)

        topAssembly = (complete + chromosome + scaffold + contig)[0]
        validAssemblies[s] = topAssembly
    else:
        _, validAssemblies[s] = strains[s].popitem()

for ass in validAssemblies:
    if ass.startswith("Streptomyces coelicolor"):
        print(ass)